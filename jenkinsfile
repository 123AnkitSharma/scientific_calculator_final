pipeline {
    agent any
    triggers {
      githubPush()
    }
    environment {
        DOCKER_IMAGE_NAME = 'scientific_calculator_final'
        GITHUB_REPO_URL = 'https://github.com/123AnkitSharma/scientific_calculator_final.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Test with JUnit') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_NAME}", '.')
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'DockerHubCred') {
                    sh 'docker tag scientific_calculator_final itsankit123/scientific_calculator_final:latest'
                    sh 'docker push itsankit123/scientific_calculator_final'
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: 'inventory'
                    )
                }
            }
        }
    }

    post {
        success {
            mail to: 'Ankit.Sharma22@iiitb.ac.in',
                 subject: "Application Deployment SUCCESS: Build ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build was successful!"
        }
        failure {
            mail to: 'Ankit.Sharma22@iiitb.ac.in',
                 subject: "Application Deployment FAILURE: Build ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build failed."
        }
        always {
            cleanWs()
        }
    }
}
